<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<!-- Appenders -->
	<!-- 전달된 로그를 어디에 출력할지 결정하는 태그  -->
	<!-- 콘솔출력, 파일출력, DB저장 -->
	
<!-- 	패턴Layout
* %c : 카테고리명(logger이름)을 표시
   * 카테고리명이 a.b.c일때, %c{2}는 b.c를 출력
* %C : 클래스명을 표시함.   
   * 풀 클래스 명이 com.kh.logger일때, %C{2}는 kh.logger를 출력
* %d : 로그 시간을 출력한다. java.text.SimpleDateFormat에서 적절한 출력 포맷을 지정할 수 있다. 
   * %d{HH:mm:ss, SSS}
   * %d{yyyy MMM dd HH:mm:ss, SSS}
   * %d{ABSOLUTE} 
   * %d{DATE} 
   * %d{ISO8601}
* %F : 파일명을 출력. 로그시 수행한 메소드, 라인번호가 함께 출력된다.
* %l : 로깅이 발생한 caller의 위치정보. 자바파일명:라인번호(링크제공) 
* %L : 라인 번호만 출력한다(링크없음)
* %m : 로그로 전달된 메시지를 출력한다.
* %M : 로그를 수행한 메소드명을 출력한다. 
* %n : 플랫폼 종속적인 개행문자가 출력. rn 또는 n
* %p : 로그 이벤트명등의 priority 가 출력(debug, info, warn, error, fatal )
* %r : 로그 처리시간 (milliseconds)
* %t : 로그이벤트가 발생된 쓰레드의 이름을 출력
* %% : % 표시를 출력. escaping
* %r : 어플리케이션 시작 이후 부터 로깅이 발생한 시점의 시간(milliseconds)
* %X : 로깅이 발생한 thread와 관련된 MDC(mapped diagnostic context)를 출력합니다. %X{key} 형태. -->
	
	
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
<!-- 			<param name="ConversionPattern" value="%-5p: %c - %m%n" /> -->
 			<param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss}]%-5p: %l - %m%n" />
		</layout>
	</appender>
	
	<appender name="console2" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
<!-- 			<param name="ConversionPattern" value="%-5p: %c - %m%n" /> -->
 			<param name="ConversionPattern" value="%-5p: %m%n" />
		</layout>
	</appender>
	
	<appender name="cnos" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
 			<param name="ConversionPattern" value="%-5p: %C{1}.%M(%L) - %m%n" />
		</layout>
	</appender>
	
	
	<!-- 시스템 log - 파일출력	 -->
	<appender name="fileLogger" class="org.apache.log4j.DailyRollingFileAppender">
		<param name="file" value="${catalina.base}${file.separator}logs${file.separator}spring${file.separator}spring.log"/>
		<param name="Append" value="true" />
		<param name="datePattern" value=".yyyy-MM-dd" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p:[%d{yyyy-MM-dd HH:mm:ss}] %F : %L - %m%n"  />
		</layout>
	</appender>
	
	
	
	<!-- 김률민 테스트 버젼 -->
	<appender name="loginlogger" class="org.apache.log4j.DailyRollingFileAppender">
		<param name="file" value="C:\\Users\\aquar\\git\\Spring\\01_HelloSpring\\src\\main\\resources\\log\\login-logger.log"/>
		<param name="Append" value="true" />
		<param name="datePattern" value=".yyyy-MM-dd" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p:[%d{yyyy-MM-dd HH:mm:ss}] %F : %L -------------- [%m] %m%n"  />
		</layout>
	</appender>
	
	
	
	
	
	 <!-- log4jdbc-remix 로그 출력 appender 추가 -->
   <appender name="sqlLogger" class="org.apache.log4j.ConsoleAppender">
      <layout class="org.apache.log4j.PatternLayout">
         <param name="ConversionPattern" value="%-5p: %m%n" />
      </layout>
   </appender>	
<!-- # Log Level
# TRACE : 추적 레벨은 Debug보다 좀더 상세한 정보를 나타냄
# DEBUG : 프로그램을 디버깅하기 위한 정보 지정
# INFO :  상태변경과 같은 정보성 메시지를 나타냄 
# WARN :  처리 가능한 문제, 향후 시스템 에러의 원인이 될 수 있는 경고성 메시지를 나타냄 
# ERROR :  요청을 처리하는 중 문제가 발생한 경우
# FATAL :  아주 심각한 에러가 발생한 상태, 시스템적으로 심각한 문제가 발생해서 어플리케이션 작동이 불가능할 경우 -->
   <!-- log4jdbc-remix 관련 logger 시작 -->
   <!-- Query Loggers  -->
   <logger name="jdbc.sqlonly" additivity="false">
      <level value="INFO" />
      <appender-ref ref="sqlLogger"/>
   </logger>
   <logger name="jdbc.resultsettable" additivity="false">
      <level value="INFO" />
      <appender-ref ref="sqlLogger"/>
   </logger>
	<!-- Application Loggers -->
	<logger name="com.kh.spring" additivity="false">
		<level value="DEBUG" />
		<appender-ref ref="console2" />
	</logger>
	
	<!-- #8.1 loggerIntercepter 출력하기 -->
	
	<logger name="com.kh.spring.common.intercepter">
		<level value="WARN"/>
		<appender-ref ref="cnos"></appender-ref>
	</logger>
	<!-- 3rdparty Loggers -->
	<logger name="org.springframework.core">
		<level value="WARN" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="WARN" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="WARN" />
	</logger>

	<logger name="org.springframework.web">
		<level value="WARN" />
	</logger>
	
	<logger name ="com.kh.spring.log4j.Log4jTest">
		<level value="WARN" />
		<appender-ref ref="console" />
	</logger>
	
	<logger name ="com.kh.spring.member" additivity="false">
		<level value="WARN" />
		<appender-ref ref="cnos" />
	</logger>
	
	<logger name ="com.kh.spring.common.aop.LoggerAspect" additivity="false">
		<level value="INFO" />
		<appender-ref ref="loginlogger" />
	</logger>
	<!-- Root Logger -->
	<root>
		<priority value="WARN" />
 		<appender-ref ref="console2" />
 		<appender-ref ref="fileLogger" />
	</root>
	
</log4j:configuration>
